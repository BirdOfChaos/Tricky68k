/* Clock frequency badge format (GHz) */
"%@ GHz" = "%@ GHz";

/* Clock frequency badge format (MHz) */
"%@ MHz" = "%@ MHz";

/* Informative text of simulator death alert */
"An unexpected condition occurred which caused the simulator to crash. Try restarting and see what happens." = "An unexpected condition occurred which caused the simulator to crash. Try restarting and see what happens.";

/* Assembler job name */
"Assemble %@" = "Assemble %@";

/* Description for generic simulator IPC errors */
"Can't connect to the simulator" = "Can't connect to the simulator";

/* Cancel */
"Cancel" = "Cancel";

/* Copy (teletype view menu) */
"Copy" = "Copy";

/* Text of the event which occurs when creating a linker file failed. */
"Could not create a linker file." = "Could not create a linker file.";

/* Debug (after segmentation fault) */
"Debug" = "Debug";

/* Error description when the simulator can't load a file */
"Impossible to load this executable" = "Impossible to load this executable";

/* Error description when MOSAddressFormatter fails. */
"Not a valid memory address!" = "Not a valid memory address!";

/* Error description when the breakpoint formula parser does not find an operator where it should be. */
"Operator expected" = "Operator expected";

/* Error description when the breakpoint formula parser finds mismatched parens */
"Parenthesis are not correctly matched" = "Parenthesis are not correctly matched";

/* Paste (teletype view menu) */
"Paste" = "Paste";

/* Restart (simulator) */
"Restart" = "Restart";

/* Error description when the user program segmentation faults */
"Segmentation fault!" = "Segmentation fault!";

/* Error description when the breakpoint formula parser does not find what it expected. */
"Symbol or numerical constant expected" = "Symbol or numerical constant expected";

/* Info about what happens when assembler optimizations are disabled */
"The assembler output will contain exactly the instructions you specified in the source file." = "The assembler output will contain exactly the instructions you specified in the source file.";

/* Info about what happens when assembler optimizations are enabled */
"The assembler will replace your instructions with shorter or faster equivalents, if available." = "The assembler will replace your instructions with shorter or faster equivalents, if available.";

/* Error description when the ELF file's entry point is NULL */
"The entry point is missing" = "The entry point is missing";

/* Info about what happens when entry point is fixed */
"The entry point of the program will always be located at $2000, regardless of the location of your start label." = "The entry point of the program will always be located at $2000, regardless of the location of your start label.";

/* Info about what happens when entry point is not fixed (uses start symbol) */
"The entry point of the program will be located where you place a global label named \"start\"." = "The entry point of the program will be located where you place a global label named \"start\".";

/* Recovery suggestion for not opening a valid ELF */
"The file you're trying to open is not a valid Motorola 68000 32-bit big-endian executable ELF file. It has probably been made for another architecture." = "The file you're trying to open is not a valid Motorola 68000 32-bit big-endian executable ELF file. It has probably been made for another architecture.";

/* Title of simulator death alert */
"The simulator has died" = "The simulator has died";

/* Recovery suggestion for generic simulator IPC errors (no options are given) */
"The simulator's process is not responding." = "The simulator's process is not responding.";

/* Recovery suggestion for opening a dylib */
"This file is a dynamic library." = "This file is a dynamic library.";

/* Recovery suggestion for fixing a missing entry point */
"To make the entry point available, declare it as a public symbol using the \"public\" directive, or select \"Use fixed entry point\" in the assembler preferences." = "To make the entry point available, declare it as a public symbol using the \"public\" directive, or select \"Use fixed entry point\" in the assembler preferences.";

/* Error description when the breakpoint formula parser does not find a symbol */
"Unknown symbol" = "Unknown symbol";

/* Recovery suggestion for a segmentation fault in the simulated program */
"Your program has accessed a memory area not declared with a DS or DC directive, or a stack overflow occurred." = "Your program has accessed a memory area not declared with a DS or DC directive, or a stack overflow occurred.";

